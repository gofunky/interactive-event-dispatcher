name: build

on:
  push:
    branches:
      - master

jobs:
  wait:
    runs-on: ubuntu-latest
    timeout-minutes: 2
    steps:
      - name: wait for previous workflows to finish
        uses: softprops/turnstyle@v1
        with:
          same-branch-only: true
          poll-interval-seconds: 10
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  build:
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    strategy:
      matrix:
        node-version: [12.x]
        os: [ubuntu-latest]
        pnpm-version: [5.7.0]
    name: node.js ${{ matrix.node-version }}
    steps:
      - name: checkout code
        uses: actions/checkout@v2.3.2
        with:
          persist-credentials: false
      - name: setup node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2.1.1
        with:
          node-version: ${{ matrix.node-version }}
      - name: cache node modules
        uses: actions/cache@v2.1.1
        with:
          path: |
            **/node_modules
            **/.putoutcache
          key: ${{ runner.OS }}-${{ matrix.node-version }}-${{ hashFiles('/pnpm-lock.yaml') }}-${{ matrix.pnpm-version }}
          restore-keys: |
            ${{ runner.OS }}-${{ matrix.node-version }}-${{ hashFiles('/pnpm-lock.yaml') }}-${{ matrix.pnpm-version }}
            ${{ runner.OS }}-${{ matrix.node-version }}-${{ hashFiles('/pnpm-lock.yaml') }}
            ${{ runner.OS }}-${{ matrix.node-version }}
      - name: setup pnpm
        uses: pnpm/action-setup@v1.2.0
        with:
          version: ${{ matrix.pnpm-version }}
          run_install: |
            - recursive: true
              args: [--frozen-lockfile, --strict-peer-dependencies]
      - name: determine ncc cache dir and version
        run: |
          echo "::set-env name=ncc-cache::$(pnpx ncc cache dir)"
          echo "::set-env name=ncc-version::$(pnpx ncc version)"
      - name: cache ncc
        uses: actions/cache@v2.1.1
        with:
          path: ${{ env.ncc-cache }}
          key: ${{ runner.OS }}-${{ matrix.node-version }}-${{ env.ncc-version }}-${{ hashFiles('**/*.ts') }}
          restore-keys: |
            ${{ runner.OS }}-${{ matrix.node-version }}-${{ env.ncc-version }}-${{ hashFiles('**/*.ts') }}
            ${{ runner.OS }}-${{ matrix.node-version }}-${{ env.ncc-version }}
      - name: build
        run: pnpm build
  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: checkout code
        uses: actions/checkout@v2.3.2
        with:
          persist-credentials: false
      - name: read matrix
        id: set-matrix
        uses: mikefarah/yq@3.4.0
        with:
          cmd: |
            printf "::set-output name=matrix::" && yq read -j ./tests.yml
  test:
    needs: [ wait, build, setup ]
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.setup.outputs.matrix) }}
    steps:
      - name: checkout code
        uses: actions/checkout@v2.3.2
        with:
          persist-credentials: false
      - name: execute action
        id: test
        uses: ./
        with:
          token: ${{ secrets.PAT }}
          prefixFilter: ${{ matrix.prefixFilter }}
          commandFilter: ${{ matrix.commandFilter }}
          appendCommand: ${{ matrix.appendCommand }}
          pullMode: ${{ matrix.pullMode }}
          body: ${{ matrix.body }}
          commentId: ${{ matrix.commentId }}
          number: ${{ matrix.number }}
          event: ${{ matrix.id }}
          sourceEvent: ${{ matrix.sourceEvent }}
      - name: check command
        if: matrix.command != ''
        run: |
          if [[ "${{ steps.test.outputs.command }}" != "${{ matrix.command }}" ]]; then
            echo '::error::`outputs.command` was expected to be `${{ matrix.command }}` but was actually `${{ steps.test.outputs.command }}`'
            exit 1
          fi
      - name: check trigger
        if: always()
        run: |
          if [[ "${{ steps.test.outputs.triggered }}" != "${{ matrix.triggered }}" ]]; then
            echo '::error::`outputs.command` was expected to be `${{ matrix.triggered }}` but was actually `${{ steps.test.outputs.triggered }}`'
            exit 1
          fi
      - name: check typeName
        if: always()
        run: |
          if [[ "${{ matrix.typeName }}" != "" && "${{ steps.test.outputs.typeName }}" != "${{ matrix.typeName }}" ]]; then
            echo '::error::`outputs.typeName` was expected to be `${{ matrix.typeName }}` but was actually `${{ steps.test.outputs.typeName }}`'
            exit 1
          else
            if [[ "${{ steps.test.outputs.typeName }}" != "${{ matrix.id }}" ]]; then
              echo '::error::`outputs.typeName` was expected to be `${{ matrix.id }}` but was actually `${{ steps.test.outputs.typeName }}`'
              exit 1
            fi
          fi
      - name: sleep until trigger event is propagated
        uses: juliangruber/sleep-action@v1.0.1
        with:
          time: 5s
      - name: validate triggered workflow status
        if: always()
        uses: xembly/validate-workflow-status@v1.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          workflow: test
          branch: master
